name: Fetch Plant Images

on:
  # Run daily at 3 AM UTC (after the wildflower data fetch at 2 AM)
  schedule:
    - cron: '0 3 * * *'

  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      limit:
        description: 'Maximum number of images to fetch (blank for all)'
        required: false
        default: ''
        type: string
      test_mode:
        description: 'Run in test mode (dry run without downloading)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  fetch-images:
    runs-on: ubuntu-latest
    name: Fetch Plant Images from Wikipedia and iNaturalist

    # Explicitly set permissions for security
    permissions:
      contents: write  # Needed to commit and push changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Pillow

      - name: Run image fetcher script
        run: |
          # Build command with optional parameters
          CMD="python3 scripts/fetch_plant_images.py"

          if [ "${{ github.event.inputs.test_mode }}" == "true" ]; then
            echo "Running in test mode (dry run)"
            CMD="$CMD --test"
          fi

          if [ -n "${{ github.event.inputs.limit }}" ]; then
            echo "Limiting to ${{ github.event.inputs.limit }} images"
            CMD="$CMD --limit ${{ github.event.inputs.limit }}"
          else
            # For scheduled runs, fetch up to 50 images per day to avoid rate limits
            echo "Limiting to 50 images per day (scheduled run)"
            CMD="$CMD --limit 50"
          fi

          echo "Running: $CMD"
          $CMD
        continue-on-error: true

      - name: Commit and push downloaded images and updated JSON files
        run: |
          echo "=== Git Configuration and Token Validation ==="
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          echo "Checking GitHub token availability..."
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "WARNING: GITHUB_TOKEN is not set"
          else
            echo "✓ GITHUB_TOKEN is set"
          fi
          
          echo "Checking repository permissions..."
          git remote -v

          echo "=== Staging Changes ==="
          # Add both images and updated JSON files
          git add public/images/plants/ src/data/Plants/*.json scripts/fetch_plant_images_log.txt

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "=== Committing Changes ==="
            # Count how many plants were updated
            UPDATED=$(git diff --staged --name-only src/data/Plants/*.json 2>/dev/null | wc -l)
            echo "Committing changes for $UPDATED plant(s)"
            git diff --staged --name-only
            
            git commit -m "Add plant images from Wikipedia and iNaturalist (${UPDATED} plants)"
            
            echo "=== Pushing Changes ==="
            echo "Attempting to push to remote repository..."
            if git push -v; then
              echo "✓ Successfully pushed changes"
            else
              EXIT_CODE=$?
              echo "✗ Failed to push changes (exit code: $EXIT_CODE)"
              echo "This may indicate a permissions issue. Check:"
              echo "  1. Workflow has 'permissions: contents: write'"
              echo "  2. Repository settings allow GitHub Actions to create and approve pull requests"
              echo "  3. Branch protection rules don't block the push"
              exit $EXIT_CODE
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Upload fetch log as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: plant-images-log-${{ github.run_number }}
          path: scripts/fetch_plant_images_log.txt
          retention-days: 30

      - name: Display log summary
        if: always()
        run: |
          if [ -f scripts/fetch_plant_images_log.txt ]; then
            echo "=== Fetch Log Summary (last 50 lines) ==="
            tail -50 scripts/fetch_plant_images_log.txt
          else
            echo "No log file found"
          fi
